import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import fs from 'fs';
import {postcssModules, sassPlugin} from 'esbuild-sass-plugin';
import path from 'path';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['src/main.ts'],
	bundle: true,
	plugins: [
		sassPlugin({
			transform: postcssModules({
				hashPrefix: 'obsidian-github-embeds--',
				localsConvention: 'camelCaseOnly',
			}),
		}),
		{
			name: 'main-css-to-styles-css',
			setup: (build) =>
				build.onEnd(() => {
					fs.renameSync('main.css', 'styles.css');
				}),
		},
		{
			name: 'graphql-redirect',
			setup: (build) => {
				build.onResolve({filter: /\.graphql$/}, (args) => {
					return {path: path.join(args.resolveDir, args.path + '.ts')};
				});
			},
		},
		{
			name: 'svg-to-text',
			setup: (build) => {
				build.onResolve({filter: /\.svg$/}, args => ({
					path: args.path,
					namespace: 'svg-import',
				}))

				build.onLoad({filter: /.*/, namespace: 'svg-import'}, async (args) => {
					return new Promise((resolve, reject) => {
						fs.readFile(args.path, (err, data) => {
							if (err) {
								reject(err)
							} else {
								resolve({
									contents: data.toString(),
									loader: 'text',
								})
							}
						})
					})
				})
			},
		},
	],
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		'dotenv',
		'/generated/*',
		...builtins,
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	minify: prod,
	outfile: 'main.js',
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
